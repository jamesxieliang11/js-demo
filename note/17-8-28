//1 精度问题
0.1+0.2

//2.1 数组的sort排序函数用法
function sortNumber(a,b)
{
console.log(a,b)
return a - b
}
var arr =["10", "5", "40", "25", "1000", "1"];
console.log(arr)
console.log(arr.sort(sortNumber))

//2.2 数组的sort排序思路模拟
var arr = [10,5, 40, 25, 1000, 1]
for(var i=0;i<=arr.length;i++){
	if(arr[i]>arr[i+1]){
		var m=arr[i];
		arr[i]=arr[i+1];
		arr[i+1]=m;
		i=i-2;
		console.log(i)
	}
}

//js闭包理解

var abc=function(y){ 
var x=y;// 这个是局部变量 
return function(){ 
alert(x++);// 就是这里调用了闭包特性中的一级函数局部变量的x，并对它进行操作 
alert(y--);// 引用的参数变量也是自由变量 
}}(5);// 初始化 
abc();// "5" "5" 
abc();// "6" "4" 
abc();// "7" "3" 


function makeAdder(a) {
    return function(b) {
        return a + b;
    }
}
var x = makeAdder(5);
var y = makeAdder(20);
x(6); // ?
y(7); // ?

(function(){alert(1)})()应该是与 a=function(){alert(1)}()等价，不能连a=都去掉。） 
